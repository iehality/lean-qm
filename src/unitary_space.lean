import hilbert_space
import analysis.inner_product_space.pi_L2

noncomputable theory

open inner_product_space
open_locale classical

universes u v

variables (n : Type u) [fintype n]

-- nÊ¨°ÂÖÉ„É¶„Éã„Çø„É™Á©∫Èñì ‚ÑÇ^n
@[reducible] def unitary_space := pi_Lp 2 (Œª i : n, ‚ÑÇ)

local notation `‚ÑÇ^`:max n := unitary_space n

local notation `ùëñ` := complex.I

instance : inner_product_space ‚ÑÇ (‚ÑÇ^n) :=
pi_Lp.inner_product_space (Œª i : n, ‚ÑÇ)

instance : complete_space (‚ÑÇ^n) := complete_of_proper

instance : finite_dimensional ‚ÑÇ (‚ÑÇ^n) := euclidean_space.finite_dimensional

instance : has_continuous_smul ‚ÑÇ (‚ÑÇ^n) := has_bounded_smul.has_continuous_smul

instance : module ‚ÑÇ (‚ÑÇ^n) := normed_space.to_module

def simple_basis : basis n ‚ÑÇ (‚ÑÇ^n) := pi.basis_fun ‚ÑÇ n

variables {n}

@[simp] lemma simple_basis_apply (i : n) (x : unitary_space n) : (simple_basis n).repr x i = x i := by simp[simple_basis]

def matrix.to_operator (M : matrix n n ‚ÑÇ) (b : basis n ‚ÑÇ (‚ÑÇ^n)) :
  operator ‚ÑÇ (‚ÑÇ^n) := linear_map.to_continuous_linear_map (matrix.to_lin b b M)

@[simp] def matrix.to_operator' (M : matrix n n ‚ÑÇ) :
  operator ‚ÑÇ (‚ÑÇ^n) := linear_map.to_continuous_linear_map (matrix.to_lin' M)

namespace unitary_space
@[simp] def matrix22 (m‚ÇÅ‚ÇÅ m‚ÇÅ‚ÇÇ m‚ÇÇ‚ÇÅ m‚ÇÇ‚ÇÇ : ‚ÑÇ) : matrix bool bool ‚ÑÇ
| ff ff := m‚ÇÅ‚ÇÅ
| ff tt := m‚ÇÅ‚ÇÇ
| tt ff := m‚ÇÇ‚ÇÅ
| tt tt := m‚ÇÇ‚ÇÇ

@[simp] def vec2 (v‚ÇÅ v‚ÇÇ : ‚ÑÇ) : ‚ÑÇ^bool
| ff := v‚ÇÅ
| tt := v‚ÇÇ

local notation `[` b‚ÇÅ‚ÇÅ `, ` b‚ÇÅ‚ÇÇ `|` b‚ÇÇ‚ÇÅ `, ` b‚ÇÇ‚ÇÇ `]` := matrix22 b‚ÇÅ‚ÇÅ b‚ÇÅ‚ÇÇ b‚ÇÇ‚ÇÅ b‚ÇÇ‚ÇÇ

def Pauli‚ÇÄ : operator ‚ÑÇ (‚ÑÇ^bool) := 1
def Pauli‚ÇÅ : operator ‚ÑÇ (‚ÑÇ^bool) := [0,  1 |  1,  0].to_operator'
def Pauli‚ÇÇ : operator ‚ÑÇ (‚ÑÇ^bool) := [0, -ùëñ | -ùëñ,  0].to_operator'
def Pauli‚ÇÉ : operator ‚ÑÇ (‚ÑÇ^bool) := [1,  0 |  0, -1].to_operator'

lemma Pauli‚ÇÅ_hermitian : is_hermitian Pauli‚ÇÅ :=
(Œª x y, by {
  have : ‚àÄ v, [0, 1|1, 0].mul_vec v = vec2 (v tt) (v ff), 
  { intros v, funext b, cases b; simp[matrix.mul_vec, matrix.dot_product] },
  simp[Pauli‚ÇÅ, this], exact add_comm _ _ })

lemma Pauli‚ÇÇ_hermitian : is_hermitian Pauli‚ÇÇ :=
(Œª x y, by {
  have : ‚àÄ v, [0, -ùëñ| -ùëñ, 0].mul_vec v = -ùëñ ‚Ä¢ vec2 (v tt) (v ff), 
  { intros v, funext b, cases b; simp[matrix.mul_vec, matrix.dot_product] },
  simp[Pauli‚ÇÇ, this],
  })

end unitary_space
